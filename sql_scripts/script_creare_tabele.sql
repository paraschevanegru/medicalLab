-- Generated by Oracle SQL Developer Data Modeler 20.2.0.167.1538
--   at:        2020-12-29 14:40:09 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE asistenti (
    id_asistent    NUMBER(6) NOT NULL,
    cod_asistent   NUMBER(3) NOT NULL,
    nume_asistent  VARCHAR2(40) NOT NULL,
    telefon        VARCHAR2(10) NOT NULL,
    email          VARCHAR2(40) NOT NULL
)
LOGGING;

ALTER TABLE asistenti ADD CHECK ( REGEXP_LIKE ( nume_asistent,
                                                '^[a-zA-Z .''-]+$' ) );

ALTER TABLE asistenti
    ADD CHECK ( length(to_char(telefon)) = 10
                AND substr(to_char(telefon),
                           1,
                           1) = '0'
                OR substr(to_char(telefon),
                          2,
                          1) = '2'
                OR substr(to_char(telefon),
                          2,
                          1) = '3'
                OR substr(to_char(telefon),
                          2,
                          1) = '7' );

ALTER TABLE asistenti ADD CHECK ( REGEXP_LIKE ( email,
                                                '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE asistenti ADD CONSTRAINT asistenti_pk PRIMARY KEY ( id_asistent );

ALTER TABLE asistenti ADD CONSTRAINT cod_asistent_un UNIQUE ( cod_asistent );

CREATE TABLE buletine_teste (
    id_buletin_test   NUMBER(6) NOT NULL,
    data_validare     DATE NOT NULL,
    rezultat          VARCHAR2(20) NOT NULL,
    id_test_efectuat  NUMBER(7) NOT NULL
)
LOGGING;

ALTER TABLE buletine_teste ADD CONSTRAINT buletine_teste_pk PRIMARY KEY ( id_buletin_test );

CREATE TABLE detalii_teste (
    id_test             NUMBER(6) NOT NULL,
    interval_referinta  VARCHAR2(2040) NOT NULL,
    unitate_masura      VARCHAR2(30),
    metoda_prelucrare   VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE detalii_teste ADD CONSTRAINT detalii_teste_pk PRIMARY KEY ( id_test );

ALTER TABLE detalii_teste ADD CONSTRAINT interval_referinta_un UNIQUE ( interval_referinta );

CREATE TABLE laboranti (
    id_laborant    NUMBER(6) NOT NULL,
    cod_laborant   NUMBER(3) NOT NULL,
    nume_laborant  VARCHAR2(40) NOT NULL,
    specializare   VARCHAR2(20) NOT NULL,
    telefon        VARCHAR2(10) NOT NULL,
    email          VARCHAR2(40)
)
LOGGING;

ALTER TABLE laboranti ADD CHECK ( REGEXP_LIKE ( nume_laborant,
                                                '^[a-zA-Z .''-]+$' ) );

ALTER TABLE laboranti
    ADD CHECK ( length(to_char(telefon)) = 10
                AND substr(to_char(telefon),
                           1,
                           1) = '0'
                OR substr(to_char(telefon),
                          2,
                          1) = '2'
                OR substr(to_char(telefon),
                          2,
                          1) = '3'
                OR substr(to_char(telefon),
                          2,
                          1) = '7' );

ALTER TABLE laboranti ADD CHECK ( REGEXP_LIKE ( email,
                                                '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE laboranti ADD CONSTRAINT laboranti_pk PRIMARY KEY ( id_laborant );

ALTER TABLE laboranti ADD CONSTRAINT cod_laborant_un UNIQUE ( cod_laborant );

CREATE TABLE pacienti (
    id_pacient     NUMBER(6) NOT NULL,
    nume_pacient   VARCHAR2(40) NOT NULL,
    cnp            NUMBER(13) NOT NULL,
    data_nasterii  DATE NOT NULL,
    telefon        VARCHAR2(10) NOT NULL,
    email          VARCHAR2(40) NOT NULL
)
LOGGING;

ALTER TABLE pacienti ADD CHECK ( REGEXP_LIKE ( nume_pacient,
                                               '^[a-zA-Z .''-]+$' ) );

ALTER TABLE pacienti
    ADD CHECK ( length(to_char(cnp)) = 13
                AND substr(to_char(cnp), 1, 1) = '1'
                OR substr(to_char(cnp), 1, 1) = '2'
                OR substr(to_char(cnp), 1, 1) = '5'
                OR substr(to_char(cnp), 1, 1) = '6' );

ALTER TABLE pacienti
    ADD CHECK ( length(to_char(telefon)) = 10
                AND substr(to_char(telefon),
                           1,
                           1) = '0'
                OR substr(to_char(telefon),
                          2,
                          1) = '2'
                OR substr(to_char(telefon),
                          2,
                          1) = '3'
                OR substr(to_char(telefon),
                          2,
                          1) = '7' );

ALTER TABLE pacienti ADD CHECK ( REGEXP_LIKE ( email,
                                               '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE pacienti ADD CONSTRAINT pacienti_pk PRIMARY KEY ( id_pacient );

ALTER TABLE pacienti ADD CONSTRAINT cnp_un UNIQUE ( cnp );

CREATE TABLE plati (
    id_plata     NUMBER(6) NOT NULL,
    data_plata   DATE NOT NULL,
    total_plata  NUMBER(7) NOT NULL,
    moneda       VARCHAR2(3) DEFAULT 'lei' NOT NULL,
    id_pacient   NUMBER(7) NOT NULL
)
LOGGING;

ALTER TABLE plati ADD CHECK ( total_plata > 0 );

ALTER TABLE plati ADD CHECK ( moneda IN ( 'lei' ) );

ALTER TABLE plati ADD CONSTRAINT plati_pk PRIMARY KEY ( id_plata );

CREATE TABLE programari (
    id_programare    NUMBER(6) NOT NULL,
    cod_programare   NUMBER(6) NOT NULL,
    data_programare  DATE NOT NULL,
    id_pacient       NUMBER(6) NOT NULL,
    id_asistent      NUMBER(6) NOT NULL
)
LOGGING;
ALTER TABLE programari ADD CONSTRAINT programari_pk PRIMARY KEY ( id_programare );

CREATE TABLE teste (
    id_test      NUMBER(6) NOT NULL,
    nume_test    VARCHAR2(40) NOT NULL,
    pret_test    NUMBER(4) NOT NULL,
    moneda       VARCHAR2(3) DEFAULT 'lei' NOT NULL,
    id_tip_test  NUMBER(7) NOT NULL
)
LOGGING;

ALTER TABLE teste ADD CHECK ( pret_test BETWEEN 10 AND 1000 );

ALTER TABLE teste ADD CHECK ( moneda IN ( 'lei' ) );

ALTER TABLE teste ADD CONSTRAINT teste_pk PRIMARY KEY ( id_test );

ALTER TABLE teste ADD CONSTRAINT teste_nume_test_un UNIQUE ( nume_test );

CREATE TABLE teste_efectuate (
    id_test_efectuat  NUMBER(6) NOT NULL,
    data_recoltare    DATE,
    data_prelucrare   DATE,
    id_pacient        NUMBER(7) NOT NULL,
    id_asistent       NUMBER(6) NOT NULL,
    id_laborant       NUMBER(6) NOT NULL,
    id_test           NUMBER(7) NOT NULL
)
LOGGING;

ALTER TABLE teste_efectuate ADD CONSTRAINT teste_efectuate_pk PRIMARY KEY ( id_test_efectuat );

CREATE TABLE tipuri_teste (
    id_tip_test        NUMBER(6) NOT NULL,
    denumire_tip_test  VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE tipuri_teste
    ADD CHECK ( denumire_tip_test IN ( 'Alergologie', 'Biochimie', 'Biologie moleculara', 'Citogenetica', 'Hematologie',
                                       'Histopatologie',
                                       'Imunologie',
                                       'Markeri endocrini',
                                       'Microbiologie',
                                       'Toxicologie' ) );

ALTER TABLE tipuri_teste ADD CONSTRAINT tipuri_teste_pk PRIMARY KEY ( id_tip_test );

ALTER TABLE buletine_teste
    ADD CONSTRAINT buletine_teste_efectuate_fk FOREIGN KEY ( id_test_efectuat )
        REFERENCES teste_efectuate ( id_test_efectuat )
    NOT DEFERRABLE;

ALTER TABLE detalii_teste
    ADD CONSTRAINT detalii_teste_teste_fk FOREIGN KEY ( id_test )
        REFERENCES teste ( id_test )
    NOT DEFERRABLE;

ALTER TABLE plati
    ADD CONSTRAINT plati_pacienti_fk FOREIGN KEY ( id_pacient )
        REFERENCES pacienti ( id_pacient )
    NOT DEFERRABLE;

ALTER TABLE programari
    ADD CONSTRAINT programari_asistenti_fk FOREIGN KEY ( id_asistent )
        REFERENCES asistenti ( id_asistent )
    NOT DEFERRABLE;

ALTER TABLE programari
    ADD CONSTRAINT programari_pacienti_fk FOREIGN KEY ( id_pacient )
        REFERENCES pacienti ( id_pacient )
    NOT DEFERRABLE;

ALTER TABLE teste_efectuate
    ADD CONSTRAINT teste_efectuate_asistenti_fk FOREIGN KEY ( id_asistent )
        REFERENCES asistenti ( id_asistent )
    NOT DEFERRABLE;

ALTER TABLE teste_efectuate
    ADD CONSTRAINT teste_efectuate_laboranti_fk FOREIGN KEY ( id_laborant )
        REFERENCES laboranti ( id_laborant )
    NOT DEFERRABLE;

ALTER TABLE teste_efectuate
    ADD CONSTRAINT teste_efectuate_pacienti_fk FOREIGN KEY ( id_pacient )
        REFERENCES pacienti ( id_pacient )
    NOT DEFERRABLE;

ALTER TABLE teste_efectuate
    ADD CONSTRAINT teste_efectuate_teste_fk FOREIGN KEY ( id_test )
        REFERENCES teste ( id_test )
    NOT DEFERRABLE;

ALTER TABLE teste
    ADD CONSTRAINT teste_tipuri_teste_fk FOREIGN KEY ( id_tip_test )
        REFERENCES tipuri_teste ( id_tip_test )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER trg_data_nasterii 
    BEFORE INSERT OR UPDATE ON Pacienti 
    FOR EACH ROW 
BEGIN
    IF(trunc(:new.data_nasterii) > trunc(SYSDATE))
    THEN
      RAISE_APPLICATION_ERROR( -20001,'Data invalida: ' || trunc(:new.data_nasterii)|| 'trebuie sa fie mai mica decat data curenta.' || trunc(SYSDATE));
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_data_plata 
    BEFORE INSERT OR UPDATE ON Plati 
    FOR EACH ROW 
BEGIN
    IF(trunc(:new.data_plata ) != trunc(SYSDATE))
    THEN
      RAISE_APPLICATION_ERROR( -20001,'Data invalida: ' || trunc(:new.data_plata)|| ' trebuie sa fie aceeasi ca data curenta.' || trunc(SYSDATE));
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_data_prelucrare 
    BEFORE INSERT ON Teste_Efectuate 
    FOR EACH ROW 
BEGIN
    IF(trunc(:new.data_prelucrare) < trunc(SYSDATE))
    THEN
      RAISE_APPLICATION_ERROR( -20001,'Data invalida: ' || trunc(:new.data_prelucrare)|| ' nu trebuie sa fie mai mica decat data curenta.' || trunc(SYSDATE));
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_data_recoltare 
    BEFORE INSERT ON Teste_Efectuate 
    FOR EACH ROW 
BEGIN
    IF(trunc(:new.data_recoltare) != trunc(SYSDATE))
    THEN
      RAISE_APPLICATION_ERROR( -20001,'Data invalida: ' || trunc(:new.data_recoltare)|| ' trebuie sa fie aceeasi ca data curenta.' || trunc(SYSDATE));
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_data_validare 
    BEFORE INSERT ON Buletine_teste 
    FOR EACH ROW 
BEGIN
    IF(trunc(:new.data_validare) < trunc(SYSDATE))
    THEN
      RAISE_APPLICATION_ERROR( -20001,'Data invalida: ' || trunc(:new.data_validare)|| ' nu trebuie sa fie mai mica decat data curenta.' || trunc(SYSDATE));
    END IF;
END; 
/

CREATE SEQUENCE asistenti_id_asistent_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER asistenti_id_asistent_trg BEFORE
    INSERT ON asistenti
    FOR EACH ROW
    WHEN ( new.id_asistent IS NULL )
BEGIN
    :new.id_asistent := asistenti_id_asistent_seq.nextval;
END;
/

CREATE SEQUENCE buletine_teste_id_buletin_test START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER buletine_teste_id_buletin_test BEFORE
    INSERT ON buletine_teste
    FOR EACH ROW
    WHEN ( new.id_buletin_test IS NULL )
BEGIN
    :new.id_buletin_test := buletine_teste_id_buletin_test.nextval;
END;
/

CREATE SEQUENCE laboranti_id_laborant_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER laboranti_id_laborant_trg BEFORE
    INSERT ON laboranti
    FOR EACH ROW
    WHEN ( new.id_laborant IS NULL )
BEGIN
    :new.id_laborant := laboranti_id_laborant_seq.nextval;
END;
/

CREATE SEQUENCE pacienti_id_pacient_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pacienti_id_pacient_trg BEFORE
    INSERT ON pacienti
    FOR EACH ROW
    WHEN ( new.id_pacient IS NULL )
BEGIN
    :new.id_pacient := pacienti_id_pacient_seq.nextval;
END;
/

CREATE SEQUENCE plati_id_plata_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER plati_id_plata_trg BEFORE
    INSERT ON plati
    FOR EACH ROW
    WHEN ( new.id_plata IS NULL )
BEGIN
    :new.id_plata := plati_id_plata_seq.nextval;
END;
/

CREATE SEQUENCE programari_id_programare_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER programari_id_programare_trg BEFORE
    INSERT ON programari
    FOR EACH ROW
    WHEN ( new.id_programare IS NULL )
BEGIN
    :new.id_programare := programari_id_programare_seq.nextval;
END;
/

CREATE SEQUENCE teste_id_test_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER teste_id_test_trg BEFORE
    INSERT ON teste
    FOR EACH ROW
    WHEN ( new.id_test IS NULL )
BEGIN
    :new.id_test := teste_id_test_seq.nextval;
END;
/

CREATE SEQUENCE teste_efectuate_id_test_efectu START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER teste_efectuate_id_test_efectu BEFORE
    INSERT ON teste_efectuate
    FOR EACH ROW
    WHEN ( new.id_test_efectuat IS NULL )
BEGIN
    :new.id_test_efectuat := teste_efectuate_id_test_efectu.nextval;
END;
/

CREATE SEQUENCE tipuri_teste_id_tip_test_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipuri_teste_id_tip_test_trg BEFORE
    INSERT ON tipuri_teste
    FOR EACH ROW
    WHEN ( new.id_tip_test IS NULL )
BEGIN
    :new.id_tip_test := tipuri_teste_id_tip_test_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            10
-- CREATE INDEX                             0
-- ALTER TABLE                             39
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          14
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          9
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
